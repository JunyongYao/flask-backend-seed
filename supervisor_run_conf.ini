[program:backend]
directory = %(ENV_APP_ROOT)s ; 程序的启动目录
command = %(ENV_BIN_ROOT)s/gunicorn -c gunicorn.conf manager:flask_app  ; 启动命令，可以看出与手动在命令行启动的命令是一样的
autostart = true     ; 在 supervisord 启动的时候也自动启动
startsecs = 15        ; 启动 15 秒后没有异常退出，就当作已经正常启动了
autorestart = true   ; 程序异常退出后自动重启
startretries = 3     ; 启动失败自动重试次数，默认是 3
redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false
;stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB，用log rotate做
;stdout_logfile_backups = 20     ; stdout 日志文件备份数，用log rotate做
; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）
stdout_logfile = %(ENV_APP_ROOT)s/logs/backend_stdout.log


[program:celery]
directory = %(ENV_APP_ROOT)s ; 程序的启动目录
command = %(ENV_BIN_ROOT)s/celery worker -A celery_worker -l DEBUG ; 启动命令，可以看出与手动在命令行启动的命令是一样的
autostart = true     ; 在 supervisord 启动的时候也自动启动
startsecs = 15        ; 启动 15 秒后没有异常退出，就当作已经正常启动了
autorestart = true   ; 程序异常退出后自动重启
startretries = 3     ; 启动失败自动重试次数，默认是 3
redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false
;stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB, 用log rotate做，能压缩，更牛逼
;stdout_logfile_backups = 20     ; stdout 日志文件备份数，改用log rotate做
; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）
stdout_logfile = %(ENV_APP_ROOT)s/logs/celery_stdout.log
